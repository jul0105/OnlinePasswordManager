//! Author : Julien BÃ©guin & Gil Balsiger
//! Date : 26.06.2021
//!
//! Password verification

use argon2::{
    password_hash::{PasswordHash, PasswordHasher, PasswordVerifier, SaltString},
    Argon2,
};
use rand_core::OsRng;
use zxcvbn::feedback;
use zxcvbn::zxcvbn;

const MAX_PASSWORD_CHAR: usize = 64; // Included
const MIN_PASSWORD_CHAR: usize = 8; // Included
const MIN_PASSWORD_SCORE: u8 = 3;

lazy_static::lazy_static! {
    // Argon2 with default params (Argon2id v19)
    pub static ref ARGON2: Argon2<'static> = Argon2::default();
}

/// Validate that a given password fulfill password policy and is strong enough
///
/// Return Ok if password is valid, or Err with a String containing warning and suggestions
pub fn validate(password: &str) -> Result<(), String> {
    if !check_password_policy(password) {
        return Err(
            "Invalid password. Password must be between 8 and 64 characters long.".to_string(),
        );
    }

    match check_password_strength(password) {
        Ok(_) => Ok(()),
        Err(e) => match e {
            None => Err("Invalid password.".to_string()),
            Some(val) => {
                let mut error_message = format!("Invalid password. ");

                // Add warning
                match val.warning() {
                    None => {}
                    Some(warning) => error_message += format!("{} ", warning).as_str(),
                }

                // Add suggestions
                error_message += "\nSuggestions:";
                for elem in val.suggestions() {
                    error_message += format!("\n- {}", elem).as_str();
                }

                Err(error_message.to_owned())
            }
        },
    }
}

/// Check if password policy is fulfilled
/// Password must be between 8 (included) and 64 (included) chars long
///
/// Return true if policy is fulfilled
fn check_password_policy(password: &str) -> bool {
    password.len() >= MIN_PASSWORD_CHAR && password.len() <= MAX_PASSWORD_CHAR
}

/// Check password strength with zxcvbn lib.
/// Password must have a minimal score of 3 out of 4 to be accepted
///
/// Return Ok if the password is accepted, or Err with feedback suggestions
fn check_password_strength(password: &str) -> Result<(), Option<feedback::Feedback>> {
    let estimate: zxcvbn::Entropy = zxcvbn(password, &[]).unwrap();

    if estimate.score() >= MIN_PASSWORD_SCORE {
        Ok(())
    } else {
        Err(estimate.feedback().clone())
    }
}

/// Hash password with Argon2id. A salt is generated by a CSPRNG using OS entropy.
///
/// Return PHC string ($argon2id$v=19$...)
pub fn hash(password: &str) -> String {
    ARGON2
        .hash_password_simple(
            password.as_bytes(),
            SaltString::generate(&mut OsRng).as_ref(),
        )
        .unwrap()
        .to_string()
    // TODO change parameters
}

/// Verify password against PHC string using Argon2id
///
/// Return true if password match, false otherwise
pub fn verify(hash: &str, password: &str) -> bool {
    ARGON2
        .verify_password(password.as_bytes(), &PasswordHash::new(&hash).unwrap())
        .is_ok()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn same_password_should_have_different_hash_with_salt() {
        let hash1 = hash("1234");
        let hash2 = hash("1234");

        assert_ne!(hash1, hash2);
    }

    #[test]
    fn password_hash_and_verify() {
        let hash_and_verify = |pass: &str| assert!(verify(hash(pass).as_str(), pass));

        hash_and_verify("");
        hash_and_verify("test");
        hash_and_verify("123456789");
        hash_and_verify("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85swwRD^JkMx3ft4n#MeQ5ACPB*LA68ryuVyzVan");
        hash_and_verify("\x00");
    }

    #[test]
    fn verify_different_password() {
        let hash_and_verify =
            |pass1: &str, pass2: &str| assert!(!verify(hash(pass1).as_str(), pass2));

        hash_and_verify("", "1234");
        hash_and_verify("test", "tes");
        hash_and_verify("123456789", "abcdefg");
        hash_and_verify("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85swwRD^JkMx3ft4n#MeQ5ACPB*LA68ryuVyzVan", "");
        hash_and_verify("\x00", "\x01");
    }

    #[test]
    fn verify_corrupted_hash() {
        let password = "123456789";
        let hash = hash(password);

        assert!(verify(hash.as_str(), password));

        // Remove last char from hash
        let hash2 = &hash[..(hash.len() - 1)];
        assert_ne!(hash, hash2);

        // Hash verification should fail
        assert!(!verify(hash2, password));
    }

    #[test]
    fn test_validate() {
        assert_eq!(validate("").is_ok(), false); // 0
        assert_eq!(validate("R").is_ok(), false); // 1
        assert_eq!(validate("RDK*").is_ok(), false); // 4
        assert_eq!(validate("RDK*Hda").is_ok(), false); // 7
        assert_eq!(validate("RDK*HdaL").is_ok(), false); // 8
        assert_eq!(validate("RDK*HdaLT*").is_ok(), true); // 10
        assert_eq!(validate("RDK*HdaLT*N94ckaReuHYcqWSW*Foz").is_ok(), true); // 30
        assert_eq!(
            validate("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85s").is_ok(),
            true
        ); // 64
        assert_eq!(
            validate("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85sw").is_ok(),
            true
        ); // 64
        assert_eq!(
            validate("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85sww").is_ok(),
            false
        ); // 65
        assert_eq!(validate("RDK*HdaLT*N94ckaReuHYcqWSW*FozVojA^$DRJeRMWz!PNa&sJqtz#tJp@q85swwRD^JkMx3ft4n#MeQ5ACPB*LA6").is_ok(), false); // 90

        assert_eq!(validate("test").is_ok(), false);
        assert_eq!(validate("password").is_ok(), false);
        assert_eq!(validate("johnny123").is_ok(), false);
        assert_eq!(validate("admin").is_ok(), false);
        assert_eq!(validate("123456789").is_ok(), false);
        assert_eq!(validate("HeLlO").is_ok(), false);
        assert_eq!(validate("MorNiNg$$1").is_ok(), false);
        assert_eq!(validate("MorningVerifyTelevisionWood").is_ok(), true);
        assert_eq!(validate("Adw3iq$19nm2{d9ql!").is_ok(), true);
    }

    #[test]
    fn test_check_password_policy() {
        assert_eq!(check_password_policy(""), false); // 0
        assert_eq!(check_password_policy("0"), false); // 1
        assert_eq!(check_password_policy("0123"), false); // 4
        assert_eq!(check_password_policy("0123456"), false); // 7
        assert_eq!(check_password_policy("01234567"), true); // 8
        assert_eq!(check_password_policy("0123456789"), true); // 10
        assert_eq!(
            check_password_policy("012345678901234567890123456789"),
            true
        ); // 30
        assert_eq!(
            check_password_policy(
                "012345678901234567890123456789012345678901234567890123456789012"
            ),
            true
        ); // 63
        assert_eq!(
            check_password_policy(
                "0123456789012345678901234567890123456789012345678901234567890123"
            ),
            true
        ); // 64
        assert_eq!(
            check_password_policy(
                "01234567890123456789012345678901234567890123456789012345678901234"
            ),
            false
        ); // 65
        assert_eq!(
            check_password_policy(
                "0123456789012345678901234567890123456789012345678901234567890123456789"
            ),
            false
        ); // 70
    }

    #[test]
    fn test_check_password_strength() {
        assert_eq!(check_password_strength("test").is_ok(), false);
        assert_eq!(check_password_strength("password").is_ok(), false);
        assert_eq!(check_password_strength("johnny123").is_ok(), false);
        assert_eq!(check_password_strength("admin").is_ok(), false);
        assert_eq!(check_password_strength("123456789").is_ok(), false);
        assert_eq!(check_password_strength("HeLlO").is_ok(), false);
        assert_eq!(check_password_strength("MorNiNg$$1").is_ok(), false);
        assert_eq!(
            check_password_strength("MorningVerifyTelevisionWood").is_ok(),
            true
        );
        assert_eq!(check_password_strength("Adw3iq$19nm2{d9ql!").is_ok(), true);
    }
}
